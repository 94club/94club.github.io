####关于css的书写放不放在.vue文件中
同意： (https://www.mmxiaowu.com/article/5a105d5e1b60f4043271122e)
1. 构建速度会变慢
写在组件的 style 里的样式会先经过vue-loader再走less-loader或者css-loader, 无形中增加了编译时间

2. 在用了 scope 属性后, 生成的 js 文件和 css 文件都会正常臃肿一些
scope 属性, 其实就是在经过vue-loader编译的时候, 组件模版的对应元素和 css 样式添加一个随机的属性, 
这样会造成在代码中添加大量类似data-v-33053b70这样的代码上去, 无形中使打包后的文件变大, 组件越多, 越明显

3. scope 属性, 对当前组件不存在的元素不起作用 原因同上条, 这种情况在用了组件库的情况下, 但是需要修改组件库组件样式时, 会经常遇到

4. 在用了 scope 属性后, css 解析效率会变低 css 中, 属性选择器的效率是最低的, 特别是直接用元素选择器的情况下
style.less 文件是入口文件, 负责引入其他各个子样式文件, 最后由 App.vue 根组件引入, home 文件夹下所有以下划线开头的文件为各个组件的样式,
如一些 less 配置, 可以放在 _base.less 文件里, 布局样式可以放在 _layout.less 文件里, 其他的一个路由组件一个文件, 再配合现在编辑的分屏功能,
 也是一样可以很快定位到相关文件, 甚至一些编辑器, 可以直接从模版中跳到对应的样式文件

 反对：
 暂无 

 ####关于路由懒加载 
解释：当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，
然后当路由被访问的时候才加载对应组件，这样就更加高效了
1结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载
 https://panjiachen.github.io/vue-element-admin-site/#/zh-cn/lazy-loading 
区分开发环境和生产环境的话  通过环境变量，分别是用require和import
副作用：https://github.com/PanJiaChen/vue-element-admin/issues/292
1（加强版）使用babel 的 plugins babel-plugin-dynamic-import-node 
2使用require.ensure 不区别开发和生产，基本被1代替      webpack 在编译时，会静态地解析代码中的 require.ensure()，
同时将模块添加到一个分开的 chunk 当中
这个新的 chunk 会被 webpack 通过 jsonp 来按需加载
建议使用1的加强版

### 移动端点透事件
https://segmentfault.com/a/1190000003848737
https://www.jianshu.com/p/6f85e957a725
http://www.cnblogs.com/yexiaochai/p/3462657.html
target.addEventListener(type, listener, useCapture);
useCapture  可选
Boolean，是指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件。
沿着DOM树向上冒泡的事件不会触发被指定为useCapture（也就是设为true）的listener。
当一个元素嵌套了另一个元素，两个元素都对同一个事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。
事件传播模式决定了元素以哪个顺序接收事件。进一步的解释可以查看 事件流 及 JavaScript Event order 文档。 如果没有指定， useCapture 默认为 false 。

###  flex布局  https://blog.csdn.net/baiding1123/article/details/47663217

### 规范————————css书写顺序  
3.3 属性书写顺序
[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） > Box Model（尺寸） > Typographic（文本相关） > Visual（视觉效果） 的顺序书写，以提高代码的可读性。
解释：

Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等
Box Model 相关属性包括：border / margin / padding / width / height 等
Typographic 相关属性包括：font / line-height / text-align / word-wrap 等
Visual 相关属性包括：background / color / transition / list-style 等
另外，如果包含 content 属性，应放在最前面。

示例：

.sidebar {
    /* formatting model: positioning schemes / offsets / z-indexes / display / ...  */
    position: absolute;
    top: 50px;
    left: 0;
    overflow-x: hidden;

    /* box model: sizes / margins / paddings / borders / ...  */
    width: 200px;
    padding: 5px;
    border: 1px solid #ddd;

    /* typographic: font / aligns / text styles / ... */
    font-size: 14px;
    line-height: 20px;

    /* visual: colors / shadows / gradients / ... */
    background: #f5f5f5;
    color: #333;
    -webkit-transition: color 1s;
       -moz-transition: color 1s;
            transition: color 1s;
}


### setTimeout    setInterval   es6箭头函数不改变this指向

### 规范———————
变量用驼峰
数据库字段  下划线
css样式   下划线

#### html5标签
https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/figure
https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/hgroup